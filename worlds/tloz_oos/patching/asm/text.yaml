0a/7b9e/: |
    ret
    nop
    nop

1e/6265/TX_1704: /include text.getEmberSeeds # 1704, cutscene after d1
10//useEmberSeedText: |
    cp $e5
    jr nz,@done
    ld bc,$1704
    @done:
    jp showText
10/4ade/: call useEmberSeedText

# Remove the mention of seeds being included with the seed satchel, since Ember was most likely
# the wrong one in random given seed type
1d/5730/: db $00

1e/64d7/TX_1716: /include text.horonShop1 # (Cutscene after d8)
1e/681d/TX_172d: /include text.horonShop2 # (Cutscene after d6)
1e/6361/TX_1707: /include text.horonShop3 # (Cutscene after d2)

1e/4c05/TX_0c12: /include text.advanceShop1 # (Onox finding Din in linked intro troupe cutscene)
1e/4c3f/TX_0c13: /include text.advanceShop2 # (Onox taunting Link in linked intro troupe cutscene)
1e/5497/TX_0e25: /include text.advanceShop3 # (vanilla text)

1e/5052/TX_0d0c: /include text.syrupShop1 # (text shown AFTER buying bombchus in vanilla)
1e/4f19/TX_0d01: /include text.syrupShop2 # (vanilla text)
1e/4fac/TX_0d05: /include text.syrupShop3 # (vanilla text)

1e/5375/TX_0e1c: /include text.memberShop1 # (vanilla text)
1e/63e0/TX_1709: /include text.memberShop2 # (cutscene after d3)
1e/53a0/TX_0e1e: /include text.memberShop3 # (vanilla text)

# Replace cutscene after d4 is d5 < d4 by a copy of the end text inside textbank 17, which
# will be used by text injections performed in that textbank
1e/67ba/TX_172b: /include text.subrosianMarketEnd

1e/6699/TX_1726: |  # (cutscene after d4 if d4 < d5)
    /include text.subrosianMarket1 
    db $07,$2b  # jump to TX_172b (end text copy)
1e/66f6/TX_1728: |  # (cutscene after d5 if d5 < d4)
    /include text.subrosianMarket2
    db $07,$2b  # jump to TX_172b (end text copy)
1f/4df1/TX_2b05: |  # (vanilla text slot)
    /include text.subrosianMarket3
    db $07,$0b  # jump to TX_2b0b (original end text)
1e/6777/TX_172a: |  # (cutscene after d5 if d4 < d5)
    /include text.subrosianMarket4
    db $07,$2b  # jump to TX_172b (end text copy)
1f/4ed4/TX_2b10: |  # (vanilla text slot)
    /include text.subrosianMarket5
    db $07,$0b  # jump to TX_2b0b (original end text)

# replace text in script command 9a (showtextnonexitable) using
# scriptTextReplacements: four-byte entries, first two bytes are old text
# index, second two bytes are new text index.
0b//scriptTextReplacements: |
    db $0e,$04,$17,$16    ; Horon shop 1
    db $0e,$03,$17,$2d    ; Horon shop 2
    db $0e,$02,$17,$07    ; Horon shop 3
    db $0e,$22,$0c,$12    ; Advance shop 1
    db $0e,$23,$0c,$13    ; Advance shop 2
    db $0d,$0a,$0d,$0c    ; Syrup shop 1
    db $0e,$1d,$17,$09    ; Member shop 2
    db $2b,$00,$17,$26    ; Market 1
    db $2b,$01,$17,$28    ; Market 2
    db $2b,$06,$17,$2a    ; Market 4
    db $ff
0b//scriptShowTextNonExitableCustom: |
    push de
    ld e,$02
    ld hl,scriptTextReplacements
    call searchDoubleKey
    pop de
    jr nc,@done
    ldi a,(hl)
    ld b,a
    ld c,(hl)
    @done:
    jp showTextNonExitable
0b/42e8/: call scriptShowTextNonExitableCustom

1d/5b01/getArchipelagoItemText: /include text.getArchipelagoItem

# overwrites rosa hide and seek preamble
# 1f/4533/cliffWarningText: ''
# 1f/4584/hssSkipWarningText: ''
# 1c/6b52/: dw $9202   # pointer to above
# 1f/459f/warningEndText: ''
# 1c/6b54/: dw $921d   # pointer to above

# override addresses for owl statue text.
# 3f//owlText: ''
# 3f//useOwlText: |
#     ld (w7ActiveBank),a
#     ld a,(wTextIndexH)
#     cp a,3d
#     ret nz
#     ld hl,owlTextOffsets
#     ld a,(wTextIndexL)
#     rst 18
#     ldi a,(hl)
#     ld h,(hl)
#     ld l,a
#     ld a,BANK_OWL_TEXT
#     ld (w7ActiveBank),a
#     ret
# 3f/4fd9/: call useOwlText
